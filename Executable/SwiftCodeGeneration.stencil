// {{ file_name }}
// Generated using Cerberus â€” https://github.com/StashInvest/Cerberus

import Foundation

private class {{ module_name }}{{ submodule_name }}Localized { }

public struct {{ module_name }}{{ submodule_name }}Strings {

    static let tableName: String = "{{ module_name }}{{ submodule_name }}"

    static func localize(_ key: String) -> String {
        return NSLocalizedString(key, tableName: tableName, bundle: Bundle(for: {{ module_name }}{{ submodule_name }}Localized.self), comment: "")
    }{% if subkeys.count > 0 %}

    static func localizeParameter(key: Keys, parameter: SubKeys, value: CVarArg) -> String {
        let format: String = localize(key.withParameter(parameter))
        return String.localizedStringWithFormat(format, value)
    }{% endif %}

    enum Keys: String {
    {% for key in keys %}    case {{ key|camelcase }} = "{{ module_name|lowercase }}.{{ submodule_name|lowercase }}.{{ key }}"
    {% endfor %}{% if subkeys.count > 0 %}
        func withParameter(_ parameter: SubKeys) -> String {
            return [rawValue, parameter.rawValue].joined(separator: ".")
        }
    {% endif %}}
    {% if subkeys.count > 0 %}
    enum SubKeys: String {
    {% for subkey in subkeys %}    case {{ subkey.name|camelcase }}{% if subkey.isPascal %} = "{{ subkey }}"{% endif %}
    {% endfor %}}{% endif %}{% for single in copy %}
    {% if single.value.parameters.count == nil or single.value.parameters.count == 0 %}static let {{ single.key|camelcase }}: String = localize(Keys.{{ single.key|camelcase }}.rawValue){% else %}static func {{ single.key|camelcase }}({% for parameter in single.value.parameters %}{% if not forloop.first %}, {% endif %}{{ parameter.name|camelcase }}: {{ parameter.type|parameterTypeiOS }}{% endfor %}) -> String {
        let format: String = localize(Keys.{{ single.key|camelcase }}.rawValue)
        {% for parameter in single.value.parameters %}{% if parameter.type != "string" %}let {{ parameter.name|camelcase }}Result: String = localizeParameter(key: Keys.{{ single.key|camelcase }}, parameter: SubKeys.{{ parameter.name|camelcase }}, value: {{ parameter.name|camelcase }})
        {% endif %}{% endfor %}let result: String = String.localizedStringWithFormat(format, {% for parameter in single.value.parameters %}{% if not forloop.first %}, {% endif %}{{ parameter.name|camelcase }}{% if parameter.type != "string" %}Result{% endif %}{% endfor %})
        return result
    }
{% endif %}{% endfor %}
}
